<?php
/**
 * QualifiersType
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\CatalogItemsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Webcom\Amazon\Rest\CatalogItemsApi\Model;

use Webcom\Amazon\Rest\ModelInterface;
use \ArrayAccess;
use \Webcom\Amazon\Rest\ObjectSerializer;

/**
 * QualifiersType Class Doc Comment
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\CatalogItemsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class QualifiersType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'QualifiersType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'itemCondition' => 'string',
        'itemSubcondition' => 'string',
        'fulfillmentChannel' => 'string',
        'shipsDomestically' => 'string',
        'shippingTime' => '\Webcom\Amazon\Rest\CatalogItemsApi\Model\ShippingTimeType',
        'sellerPositiveFeedbackRating' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'itemCondition' => null,
        'itemSubcondition' => null,
        'fulfillmentChannel' => null,
        'shipsDomestically' => null,
        'shippingTime' => null,
        'sellerPositiveFeedbackRating' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'itemCondition' => 'ItemCondition',
        'itemSubcondition' => 'ItemSubcondition',
        'fulfillmentChannel' => 'FulfillmentChannel',
        'shipsDomestically' => 'ShipsDomestically',
        'shippingTime' => 'ShippingTime',
        'sellerPositiveFeedbackRating' => 'SellerPositiveFeedbackRating'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'itemCondition' => 'setItemCondition',
        'itemSubcondition' => 'setItemSubcondition',
        'fulfillmentChannel' => 'setFulfillmentChannel',
        'shipsDomestically' => 'setShipsDomestically',
        'shippingTime' => 'setShippingTime',
        'sellerPositiveFeedbackRating' => 'setSellerPositiveFeedbackRating'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'itemCondition' => 'getItemCondition',
        'itemSubcondition' => 'getItemSubcondition',
        'fulfillmentChannel' => 'getFulfillmentChannel',
        'shipsDomestically' => 'getShipsDomestically',
        'shippingTime' => 'getShippingTime',
        'sellerPositiveFeedbackRating' => 'getSellerPositiveFeedbackRating'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['itemCondition'] = $data['itemCondition'] ?? null;
        $this->container['itemSubcondition'] = $data['itemSubcondition'] ?? null;
        $this->container['fulfillmentChannel'] = $data['fulfillmentChannel'] ?? null;
        $this->container['shipsDomestically'] = $data['shipsDomestically'] ?? null;
        $this->container['shippingTime'] = $data['shippingTime'] ?? null;
        $this->container['sellerPositiveFeedbackRating'] = $data['sellerPositiveFeedbackRating'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['itemCondition'] === null) {
            $invalidProperties[] = "'itemCondition' can't be null";
        }
        if ($this->container['itemSubcondition'] === null) {
            $invalidProperties[] = "'itemSubcondition' can't be null";
        }
        if ($this->container['fulfillmentChannel'] === null) {
            $invalidProperties[] = "'fulfillmentChannel' can't be null";
        }
        if ($this->container['shipsDomestically'] === null) {
            $invalidProperties[] = "'shipsDomestically' can't be null";
        }
        if ($this->container['shippingTime'] === null) {
            $invalidProperties[] = "'shippingTime' can't be null";
        }
        if ($this->container['sellerPositiveFeedbackRating'] === null) {
            $invalidProperties[] = "'sellerPositiveFeedbackRating' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets itemCondition
     *
     * @return string
     */
    public function getItemCondition()
    {
        return $this->container['itemCondition'];
    }

    /**
     * Sets itemCondition
     *
     * @param string $itemCondition The condition of the item. Possible values: New, Used, Collectible, Refurbished, or Club.
     *
     * @return self
     */
    public function setItemCondition($itemCondition)
    {
        $this->container['itemCondition'] = $itemCondition;

        return $this;
    }

    /**
     * Gets itemSubcondition
     *
     * @return string
     */
    public function getItemSubcondition()
    {
        return $this->container['itemSubcondition'];
    }

    /**
     * Sets itemSubcondition
     *
     * @param string $itemSubcondition The item subcondition for the offer listing. Possible values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other.
     *
     * @return self
     */
    public function setItemSubcondition($itemSubcondition)
    {
        $this->container['itemSubcondition'] = $itemSubcondition;

        return $this;
    }

    /**
     * Gets fulfillmentChannel
     *
     * @return string
     */
    public function getFulfillmentChannel()
    {
        return $this->container['fulfillmentChannel'];
    }

    /**
     * Sets fulfillmentChannel
     *
     * @param string $fulfillmentChannel The fulfillment channel for the item. Possible values:  * Amazon - Fulfilled by Amazon. * Merchant - Fulfilled by the seller.
     *
     * @return self
     */
    public function setFulfillmentChannel($fulfillmentChannel)
    {
        $this->container['fulfillmentChannel'] = $fulfillmentChannel;

        return $this;
    }

    /**
     * Gets shipsDomestically
     *
     * @return string
     */
    public function getShipsDomestically()
    {
        return $this->container['shipsDomestically'];
    }

    /**
     * Sets shipsDomestically
     *
     * @param string $shipsDomestically Indicates whether the marketplace specified in the request and the location that the item ships from are in the same country. Possible values: True, False, or Unknown.
     *
     * @return self
     */
    public function setShipsDomestically($shipsDomestically)
    {
        $this->container['shipsDomestically'] = $shipsDomestically;

        return $this;
    }

    /**
     * Gets shippingTime
     *
     * @return \Webcom\Amazon\Rest\CatalogItemsApi\Model\ShippingTimeType
     */
    public function getShippingTime()
    {
        return $this->container['shippingTime'];
    }

    /**
     * Sets shippingTime
     *
     * @param \Webcom\Amazon\Rest\CatalogItemsApi\Model\ShippingTimeType $shippingTime shippingTime
     *
     * @return self
     */
    public function setShippingTime($shippingTime)
    {
        $this->container['shippingTime'] = $shippingTime;

        return $this;
    }

    /**
     * Gets sellerPositiveFeedbackRating
     *
     * @return string
     */
    public function getSellerPositiveFeedbackRating()
    {
        return $this->container['sellerPositiveFeedbackRating'];
    }

    /**
     * Sets sellerPositiveFeedbackRating
     *
     * @param string $sellerPositiveFeedbackRating (98-100%, 95-97%, 90-94%, 80-89%, 70-79%, Less than 70%, or Just launched ) – Indicates the percentage of feedback ratings that were positive over the past 12 months.
     *
     * @return self
     */
    public function setSellerPositiveFeedbackRating($sellerPositiveFeedbackRating)
    {
        $this->container['sellerPositiveFeedbackRating'] = $sellerPositiveFeedbackRating;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


